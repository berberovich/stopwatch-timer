{"ast":null,"code":"var _jsxFileName = \"/home/msi/stopwatch-timer/src/components/ButtonsWrapper.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { startStopwatch } from \"../services\";\nimport { handleBtnReset, handleBtnStart } from \"../services/handlers\";\nimport Button from \"./Button\";\nimport { useStopwatchContext } from \"./context/StopwatchContextProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ButtonsWrapper() {\n  _s();\n  const {\n    state,\n    dispatch,\n    splitIntervals,\n    setSplitIntervals,\n    paused,\n    setPaused,\n    started,\n    setStarted,\n    checkboxRef\n  } = useStopwatchContext();\n  let className = \"circular\";\n  let classForBtnReset = \"circular\";\n  let classForSplit = \"circular\";\n  let btnText = \"\";\n  let onClick = \"\";\n  const handleBtnStop = () => {\n    dispatch({\n      type: \"clearTimers\",\n      payload: {\n        dispatch\n      }\n    });\n    setPaused(true);\n    setSplitIntervals(prevIntervals => {\n      let id;\n      if (checkboxRef.current) {\n        id = splitIntervals.length + 1;\n      } else {\n        var _prevIntervals$at;\n        id = ((_prevIntervals$at = prevIntervals.at(-1)) === null || _prevIntervals$at === void 0 ? void 0 : _prevIntervals$at.id) + 1 || 0;\n      }\n      const newInterval = {\n        id,\n        time: `${state.hour}:${state.minutes}:${state.seconds}:${state.milliSeconds}`,\n        ranking: prevIntervals.length + 1,\n        name: \"pause\"\n      };\n      if (checkboxRef.current) {\n        return [newInterval, ...prevIntervals];\n      } else {\n        return [...prevIntervals, newInterval];\n      }\n    });\n  };\n  const handleSplitClick = () => {\n    setSplitIntervals(prevSplitIntervals => {\n      let id;\n      if (checkboxRef.current) {\n        id = splitIntervals.length + 1;\n      } else {\n        var _prevSplitIntervals$a;\n        id = ((_prevSplitIntervals$a = prevSplitIntervals.at(-1)) === null || _prevSplitIntervals$a === void 0 ? void 0 : _prevSplitIntervals$a.id) + 1 || 0;\n      }\n      const {\n        milliSeconds,\n        seconds,\n        minutes,\n        hour\n      } = state;\n      const newSplitInterval = {\n        id,\n        time: `${hour}:${minutes}:${seconds}.${milliSeconds}`,\n        ranking: prevSplitIntervals.length + 1,\n        name: \"split\"\n      };\n      if (checkboxRef.current) {\n        return [newSplitInterval, ...prevSplitIntervals];\n      } else {\n        return [...prevSplitIntervals, newSplitInterval];\n      }\n    });\n  };\n  if (paused) {\n    btnText = \"start\";\n    onClick = () => {\n      handleBtnStart(startStopwatch, setPaused, setStarted, dispatch, state);\n    };\n    className += \" green\";\n    classForBtnReset += \" reset\";\n    classForSplit += \" not-allowed\";\n  } else {\n    btnText = \"pause\";\n    onClick = handleBtnStop;\n    className += \" red\";\n    classForBtnReset += \" reset not-allowed\";\n    classForSplit += \" split\";\n  }\n  if (!started) {\n    classForBtnReset += \" not-allowed\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"buttons-container\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      text: btnText,\n      onClick: onClick,\n      className: className\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"Split\",\n      style: {\n        color: \"black\",\n        border: \"1px solid black\"\n      },\n      disabled: paused,\n      className: classForSplit,\n      onClick: handleSplitClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"reset\",\n      onClick: () => {\n        handleBtnReset(setPaused, dispatch, setSplitIntervals, setStarted);\n      },\n      className: classForBtnReset,\n      disabled: !paused || !started\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(ButtonsWrapper, \"/bGW/nj4bRCAe2ThVxYEkUi206c=\", false, function () {\n  return [useStopwatchContext];\n});\n_c = ButtonsWrapper;\nexport default ButtonsWrapper;\nvar _c;\n$RefreshReg$(_c, \"ButtonsWrapper\");","map":{"version":3,"names":["React","startStopwatch","handleBtnReset","handleBtnStart","Button","useStopwatchContext","ButtonsWrapper","state","dispatch","splitIntervals","setSplitIntervals","paused","setPaused","started","setStarted","checkboxRef","className","classForBtnReset","classForSplit","btnText","onClick","handleBtnStop","type","payload","prevIntervals","id","current","length","at","newInterval","time","hour","minutes","seconds","milliSeconds","ranking","name","handleSplitClick","prevSplitIntervals","newSplitInterval","color","border"],"sources":["/home/msi/stopwatch-timer/src/components/ButtonsWrapper.js"],"sourcesContent":["import React from \"react\";\nimport { startStopwatch } from \"../services\";\nimport { handleBtnReset, handleBtnStart } from \"../services/handlers\";\nimport Button from \"./Button\";\nimport { useStopwatchContext } from \"./context/StopwatchContextProvider\";\n\nfunction ButtonsWrapper() {\n  const {\n    state,\n    dispatch,\n    splitIntervals,\n    setSplitIntervals,\n    paused,\n    setPaused,\n    started,\n    setStarted,\n    checkboxRef,\n  } = useStopwatchContext();\n  let className = \"circular\";\n  let classForBtnReset = \"circular\";\n  let classForSplit = \"circular\";\n  let btnText = \"\";\n  let onClick = \"\";\n  const handleBtnStop = () => {\n    dispatch({\n      type: \"clearTimers\",\n      payload: {\n        dispatch,\n      },\n    });\n    setPaused(true);\n    setSplitIntervals((prevIntervals) => {\n      let id;\n      if (checkboxRef.current) {\n        id = splitIntervals.length + 1;\n      } else {\n        id = prevIntervals.at(-1)?.id + 1 || 0;\n      }\n      const newInterval = {\n        id,\n        time: `${state.hour}:${state.minutes}:${state.seconds}:${state.milliSeconds}`,\n        ranking: prevIntervals.length + 1,\n        name: \"pause\",\n      };\n      if (checkboxRef.current) {\n        return [newInterval, ...prevIntervals];\n      } else {\n        return [...prevIntervals, newInterval];\n      }\n    });\n  };\n\n  const handleSplitClick = () => {\n    setSplitIntervals((prevSplitIntervals) => {\n      let id;\n      if (checkboxRef.current) {\n        id = splitIntervals.length + 1;\n      } else {\n        id = prevSplitIntervals.at(-1)?.id + 1 || 0;\n      }\n      const { milliSeconds, seconds, minutes, hour } = state;\n      const newSplitInterval = {\n        id,\n        time: `${hour}:${minutes}:${seconds}.${milliSeconds}`,\n        ranking: prevSplitIntervals.length + 1,\n        name: \"split\",\n      };\n\n      if (checkboxRef.current) {\n        return [newSplitInterval, ...prevSplitIntervals];\n      } else {\n        return [...prevSplitIntervals, newSplitInterval];\n      }\n    });\n  };\n\n  if (paused) {\n    btnText = \"start\";\n    onClick = () => {\n      handleBtnStart(startStopwatch, setPaused, setStarted, dispatch, state);\n    };\n    className += \" green\";\n    classForBtnReset += \" reset\";\n    classForSplit += \" not-allowed\";\n  } else {\n    btnText = \"pause\";\n    onClick = handleBtnStop;\n    className += \" red\";\n    classForBtnReset += \" reset not-allowed\";\n    classForSplit += \" split\";\n  }\n\n  if (!started) {\n    classForBtnReset += \" not-allowed\";\n  }\n  return (\n    <div className=\"buttons-container\">\n      <Button text={btnText} onClick={onClick} className={className} />\n      <Button\n        text=\"Split\"\n        style={{ color: \"black\", border: \"1px solid black\" }}\n        disabled={paused}\n        className={classForSplit}\n        onClick={handleSplitClick}\n      />\n      <Button\n        text=\"reset\"\n        onClick={() => {\n          handleBtnReset(setPaused, dispatch, setSplitIntervals, setStarted);\n        }}\n        className={classForBtnReset}\n        disabled={!paused || !started}\n      />\n    </div>\n  );\n}\n\nexport default ButtonsWrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}