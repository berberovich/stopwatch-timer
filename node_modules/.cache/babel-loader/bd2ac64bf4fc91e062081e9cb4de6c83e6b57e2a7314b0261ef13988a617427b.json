{"ast":null,"code":"export const startStopwatch = (dispatch, state) => {\n  state.timerIdForMilliseconds = setInterval(() => {\n    dispatch({\n      type: \"increase Milliseconds\",\n      payload: {\n        dispatch\n      }\n    });\n  }, 1);\n};\nexport const increaseNumber = (time, x, dispatch) => {\n  if (time === x) {\n    dispatch({\n      type: \"increase Minutes\",\n      payload: {\n        dispatch\n      }\n    });\n    return \"00\";\n  }\n  if (time[1] === \"9\") {\n    return `${+time[0] + 1}0`;\n  }\n  return `${time[0]}${+time[1] + 1}`;\n};\nexport const increaseMilliseconds = (time, x, dispatch) => {\n  if (time === x) {\n    dispatch({\n      type: \"increase Seconds\",\n      payload: {\n        dispatch\n      }\n    });\n    return \"000\";\n  }\n  if (time[2] === \"9\" && time[1] === \"9\") {\n    return `${+time[0] + 1}00`;\n  }\n  if (time[2] === \"9\") {\n    return `${time[0]}${+time[1] + 4}0`;\n  }\n  return `${time[0]}${time[1]}${+time[2] + 1}`;\n};\nexport const initialState = {\n  hour: \"00\",\n  milliSeconds: \"000\",\n  seconds: \"00\",\n  minutes: \"00\",\n  timerIdForMilliseconds: null\n};\nexport const clearTimers = state => {\n  console.log(state);\n  clearInterval(state.timerIdForMilliseconds);\n};\nexport const reducerFunc = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  const {\n    dispatch\n  } = payload;\n  switch (type) {\n    case \"increase Milliseconds\":\n      {\n        return {\n          ...state,\n          milliSeconds: increaseMilliseconds(state.milliSeconds, \"999\", dispatch)\n        };\n      }\n    case \"increase Seconds\":\n      {\n        const target = type.split(\" \")[1].toLowerCase();\n        return {\n          ...state,\n          seconds: increaseNumber(state[target], \"59\", dispatch)\n        };\n      }\n    case \"increase Minutes\":\n      {\n        return {\n          ...state,\n          minutes: increaseNumber(state.minutes, \"59\", dispatch)\n        };\n      }\n    case \"clearTimers\":\n      {\n        clearTimers(state);\n        return {\n          ...state\n        };\n      }\n    case \"reset\":\n      {\n        clearTimers(state);\n        return {\n          hour: \"00\",\n          milliSeconds: \"000\",\n          seconds: \"00\",\n          minutes: \"00\",\n          timerIdForMilliseconds: null\n        };\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};","map":{"version":3,"names":["startStopwatch","dispatch","state","timerIdForMilliseconds","setInterval","type","payload","increaseNumber","time","x","increaseMilliseconds","initialState","hour","milliSeconds","seconds","minutes","clearTimers","console","log","clearInterval","reducerFunc","action","target","split","toLowerCase"],"sources":["/home/msi/stopwatch-timer/src/services/index.js"],"sourcesContent":["export const startStopwatch = (dispatch, state) => {\n  state.timerIdForMilliseconds = setInterval(() => {\n    dispatch({ type: \"increase Milliseconds\", payload: { dispatch } });\n  }, 1);\n};\n\nexport const increaseNumber = (time, x, dispatch) => {\n  if (time === x) {\n    dispatch({ type: \"increase Minutes\", payload: { dispatch } });\n    return \"00\";\n  }\n  if (time[1] === \"9\") {\n    return `${+time[0] + 1}0`;\n  }\n\n  return `${time[0]}${+time[1] + 1}`;\n};\n\nexport const increaseMilliseconds = (time, x, dispatch) => {\n  if (time === x) {\n    dispatch({ type: \"increase Seconds\", payload: { dispatch } });\n    return \"000\";\n  }\n\n  if (time[2] === \"9\" && time[1] === \"9\") {\n    return `${+time[0] + 1}00`;\n  }\n  if (time[2] === \"9\") {\n    return `${time[0]}${+time[1] + 4}0`;\n  }\n\n  return `${time[0]}${time[1]}${+time[2] + 1}`;\n};\n\nexport const initialState = {\n  hour: \"00\",\n  milliSeconds: \"000\",\n  seconds: \"00\",\n  minutes: \"00\",\n  timerIdForMilliseconds: null,\n};\n\nexport const clearTimers = (state) => {\n  console.log(state);\n  clearInterval(state.timerIdForMilliseconds);\n};\n\nexport const reducerFunc = (state, action) => {\n  const { type, payload } = action;\n  const { dispatch } = payload;\n  switch (type) {\n    case \"increase Milliseconds\": {\n      return {\n        ...state,\n        milliSeconds: increaseMilliseconds(state.milliSeconds, \"999\", dispatch),\n      };\n    }\n    case \"increase Seconds\": {\n      const target = type.split(\" \")[1].toLowerCase();\n      return {\n        ...state,\n        seconds: increaseNumber(state[target], \"59\", dispatch),\n      };\n    }\n    case \"increase Minutes\": {\n      return {\n        ...state,\n        minutes: increaseNumber(state.minutes, \"59\", dispatch),\n      };\n    }\n\n    case \"clearTimers\": {\n      clearTimers(state);\n      return {\n        ...state,\n      };\n    }\n\n    case \"reset\": {\n      clearTimers(state);\n      return {\n        hour: \"00\",\n        milliSeconds: \"000\",\n        seconds: \"00\",\n        minutes: \"00\",\n        timerIdForMilliseconds: null,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}